# migrations/env.py - Alembic environment configuration
from logging.config import fileConfig
from sqlalchemy import engine_from_config, pool
from alembic import context
import os
import sys

# Add the project root directory to Python path
sys.path.insert(0, os.path.dirname(os.path.dirname(__file__)))

# Import your models and configuration
from app.models.base import Base
from app.core.config import settings

# Import all models to ensure they are registered with SQLAlchemy
from app.models import *

# this is the Alembic Config object, which provides
# access to the values within the .ini file in use.
config = context.config

# Interpret the config file for Python logging.
# This line sets up loggers basically.
if config.config_file_name is not None:
    fileConfig(config.config_file_name)

# FIXED: Escape % signs for ConfigParser
escaped_url = settings.DATABASE_URL.replace('%', '%%')
config.set_main_option("sqlalchemy.url", escaped_url)

# add your model's MetaData object here
# for 'autogenerate' support
target_metadata = Base.metadata

# other values from the config, defined by the needs of env.py,
# can be acquired:
# my_important_option = config.get_main_option("my_important_option")
# ... etc.

def include_name(name, type_, parent_names):
    """
    Determine which database objects to include in autogenerated migrations.
    
    Args:
        name: Object name
        type_: Object type (table, column, etc.)
        parent_names: Parent object names
    
    Returns:
        Boolean indicating whether to include the object
    """
    # Skip Alembic version table
    if name == "alembic_version":
        return False
    
    # Include all other objects by default
    return True

def include_object(object, name, type_, reflected, compare_to):
    """
    Determine whether to include an object in autogenerated migrations.
    
    Args:
        object: SQLAlchemy object
        name: Object name
        type_: Object type
        reflected: Whether object was reflected from database
        compare_to: Object being compared to (for diffs)
    
    Returns:
        Boolean indicating whether to include the object
    """
    # Skip Alembic version table
    if name == "alembic_version":
        return False
    
    # Include all other objects
    return True

def render_item(type_, obj, autogen_context):
    """
    Render custom representations of migration operations.
    
    Args:
        type_: Operation type
        obj: Operation object
        autogen_context: Autogeneration context
    
    Returns:
        Rendered operation string or None for default rendering
    """
    # Use default rendering for all operations
    return False

def compare_type(context, inspected_column, metadata_column, inspected_type, metadata_type):
    """
    Compare column types for differences.
    
    Args:
        context: Migration context
        inspected_column: Column from database inspection
        metadata_column: Column from metadata
        inspected_type: Type from database
        metadata_type: Type from metadata
    
    Returns:
        Boolean indicating whether types are different
    """
    # Use default type comparison
    return None

def run_migrations_offline() -> None:
    """
    Run migrations in 'offline' mode.

    This configures the context with just a URL
    and not an Engine, though an Engine is acceptable
    here as well. By skipping the Engine creation
    we don't even need a DBAPI to be available.

    Calls to context.execute() here emit the given string to the
    script output.
    """
    url = config.get_main_option("sqlalchemy.url")
    context.configure(
        url=url,
        target_metadata=target_metadata,
        literal_binds=True,
        dialect_opts={"paramstyle": "named"},
        include_name=include_name,
        include_object=include_object,
        render_item=render_item,
        compare_type=compare_type,
        # Additional options
        compare_server_default=True,
        user_module_prefix="sa.",
        render_as_batch=True,  # Enable batch mode for SQLite compatibility
    )

    with context.begin_transaction():
        context.run_migrations()

def run_migrations_online() -> None:
    """
    Run migrations in 'online' mode.

    In this scenario we need to create an Engine
    and associate a connection with the context.
    """
    # Create engine configuration
    configuration = config.get_section(config.config_ini_section)
    # FIXED: Use the actual DATABASE_URL directly (no double escaping)
    configuration["sqlalchemy.url"] = settings.DATABASE_URL
    
    # Additional engine configuration
    configuration.setdefault("sqlalchemy.pool_pre_ping", "true")
    configuration.setdefault("sqlalchemy.pool_recycle", "3600")
    
    connectable = engine_from_config(
        configuration,
        prefix="sqlalchemy.",
        poolclass=pool.NullPool,  # Don't use connection pooling in migrations
    )

    with connectable.connect() as connection:
        context.configure(
            connection=connection,
            target_metadata=target_metadata,
            include_name=include_name,
            include_object=include_object,
            render_item=render_item,
            compare_type=compare_type,
            # Additional options
            compare_server_default=True,
            user_module_prefix="sa.",
            render_as_batch=True,  # Enable batch mode for SQLite compatibility
            transaction_per_migration=True,  # Wrap each migration in a transaction
        )

        with context.begin_transaction():
            context.run_migrations()

if context.is_offline_mode():
    run_migrations_offline()
else:
    run_migrations_online()