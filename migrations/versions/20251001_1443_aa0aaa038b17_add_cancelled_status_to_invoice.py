"""add cancelled status to invoice

Revision ID: aa0aaa038b17
Revises: 9e0947f7a9ea
Create Date: 2025-10-01 14:43:42.018793

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'aa0aaa038b17'
down_revision: Union[str, Sequence[str], None] = '9e0947f7a9ea'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('password_reset_tokens', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_password_reset_tokens_expires_at'))
        batch_op.drop_index(batch_op.f('ix_password_reset_tokens_token'))
        batch_op.drop_index(batch_op.f('ix_password_reset_tokens_used'))
        batch_op.drop_index(batch_op.f('ix_password_reset_tokens_user_id'))

    op.drop_table('password_reset_tokens')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('password_reset_tokens',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('token', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('expires_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('used', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('created_ip', sa.VARCHAR(length=45), autoincrement=False, nullable=True),
    sa.Column('used_ip', sa.VARCHAR(length=45), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('used_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_password_reset_tokens_user_id_users'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_password_reset_tokens'))
    )
    with op.batch_alter_table('password_reset_tokens', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_password_reset_tokens_user_id'), ['user_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_password_reset_tokens_used'), ['used'], unique=False)
        batch_op.create_index(batch_op.f('ix_password_reset_tokens_token'), ['token'], unique=True)
        batch_op.create_index(batch_op.f('ix_password_reset_tokens_expires_at'), ['expires_at'], unique=False)

    # ### end Alembic commands ###
